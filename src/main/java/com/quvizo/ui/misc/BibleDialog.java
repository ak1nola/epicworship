/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddBibleDialog.java
 *
 * Created on 14-May-2011, 5:41:41 PM
 */
package com.quvizo.ui.misc;

import com.quvizo.data.entity.BibleTranslation;
import com.quvizo.data.entity.PresentationAssets;
import com.quvizo.projector.pages.PXSongPage;
import com.quvizo.ui.ProjectorView;
import com.quvizo.ui.bible.BibleDialogController;
import com.quvizo.ui.director.fxcontroller.CreationTabController;
import com.quvizo.universal.BibleKeeper;
import com.quvizo.universal.EntityOverlord;
import com.quvizo.universal.UI;
import com.quvizo.util.OSUtils;
import com.quvizo.wrappers.BibleScripture;
import com.sun.glass.ui.Application;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javax.persistence.EntityManager;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.jdom.JDOMException;

/**
 *
 * @author BuffLogic
 */
public class BibleDialog extends javax.swing.JDialog {

    DefaultListModel chapmod = new DefaultListModel();
    DefaultListModel versmod = new DefaultListModel();
    private Locale defLoc = Locale.getDefault();

    /**
     * Creates new form AddBibleDialog
     */
    public BibleDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/media/logo.png")).getImage()); //NOI18N
        chapterlist.setModel(chapmod);
        fromverselist.setModel(versmod);
        toverselist.setModel(versmod);
        //import books name from .txt - Also was internatiolized
        oldtlist.setListData(BibleKeeper.getInstance().getOldTestamentBooks().toArray());
        newtlist.setListData(BibleKeeper.getInstance().getNewTestamentBooks().toArray());
//        if (defLoc.equals(Locale.forLanguageTag("pt-BR"))) {
//            String[] listvers = {"ACF", "RA", "NVI", "NTLH"};
//            versionList.setListData(listvers);
//        }
        //Load versions name from DataBase(Loaded at EntityOverLord)
        ArrayList<String> listvers = new ArrayList<String>();
        for (BibleTranslation t : BibleKeeper.getInstance().getTranslations()) {
            listvers.add(t.getName());
        }
        versionList.setListData(listvers.toArray());
        this.setLocationRelativeTo(null);
        prepListActions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        oldtlist = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        newtlist = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        chapterlist = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        fromverselist = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        toverselist = new javax.swing.JList();
        addToPresBtn = new javax.swing.JButton();
        closebtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        projnextbtn = new javax.swing.JButton();
        prevbtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        versionList = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        versionlabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        previewArea = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/Bundle"); // NOI18N
        setTitle(bundle.getString("bible.window.title")); // NOI18N
        setModal(true);

        oldtlist.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua", "Judges", "Ruth", "1 Samuel", "2 Samuel", "1 Kings", "2 Kings", "1 Chronicles", "2 Chronicles", "Ezra", "Nehemiah", "Esther", "Job", "Psalms", "Proverbs", "Ecclesiastes", "Song of Solomon", "Isaiah", "Jeremiah", "Lamentations", "Ezekiel", "Daniel", "Hosea", "Joel", "Amos", "Obadiah", "Jonah", "Micah", "Nahum", "Habakkuk", "Zephaniah", "Haggai", "Zechariah", "Malachi" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        oldtlist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                oldtlistValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(oldtlist);

        newtlist.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Matthew", "Mark", "Luke", "John", "Acts", "Romans", "1 Corinthians", "2 Corinthians", "Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians", "2 Thessalonians", "1 Timothy", "2 Timothy", "Titus", "Philemon", "Hebrews", "James", "1 Peter", "2 Peter", "1 John", "2 John", "3 John", "Jude", "Revelation" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        newtlist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                newtlistValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(newtlist);

        chapterlist.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        chapterlist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                chapterlistValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(chapterlist);

        fromverselist.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        fromverselist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fromverselistValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(fromverselist);

        toverselist.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        toverselist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                toverselistValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(toverselist);

        addToPresBtn.setText(bundle.getString("bible.addpresentation")); // NOI18N
        addToPresBtn.setToolTipText(bundle.getString("bible.hint1")); // NOI18N
        addToPresBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToPresBtnActionPerformed(evt);
            }
        });

        closebtn.setText(bundle.getString("bible.close")); // NOI18N
        closebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebtnActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("bible.insta.project"))); // NOI18N

        projnextbtn.setText(bundle.getString("bible.project.next")); // NOI18N
        projnextbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projnextbtnActionPerformed(evt);
            }
        });

        prevbtn.setText(bundle.getString("bible.project.prev")); // NOI18N
        prevbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevbtnActionPerformed(evt);
            }
        });

        jButton2.setText(bundle.getString("tab.live.buttonclear")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projnextbtn)
                            .addComponent(prevbtn))
                        .addContainerGap(22, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projnextbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prevbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setText(bundle.getString("bible.old.testament")); // NOI18N

        jLabel2.setText(bundle.getString("bible.new.testament")); // NOI18N

        jLabel3.setText(bundle.getString("bible.chapter")); // NOI18N

        jLabel4.setText(bundle.getString("bible.from")); // NOI18N

        jLabel5.setText(bundle.getString("bible.to")); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("bible.activeversion"))); // NOI18N

        versionList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "KJV", "ESV", "AMP", "MSG" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        versionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                versionListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(versionList);

        jLabel6.setText(bundle.getString("bible.or")); // NOI18N

        jButton1.setText(bundle.getString("bible.load.external")); // NOI18N
        jButton1.setToolTipText(bundle.getString("bible.hint2")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        versionlabel.setText(bundle.getString("bible.current.version")); // NOI18N
        versionlabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(versionlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(versionlabel, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        versionlabel.getAccessibleContext().setAccessibleName(null);

        previewArea.setEditable(false);
        previewArea.setColumns(20);
        previewArea.setLineWrap(true);
        previewArea.setRows(5);
        jScrollPane5.setViewportView(previewArea);

        jLabel7.setText(bundle.getString("bible.preview")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(closebtn)
                            .addComponent(addToPresBtn)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(addToPresBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(267, 267, 267))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void oldtlistValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_oldtlistValueChanged
    {//GEN-HEADEREND:event_oldtlistValueChanged
    }//GEN-LAST:event_oldtlistValueChanged

    private void newtlistValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_newtlistValueChanged
    {//GEN-HEADEREND:event_newtlistValueChanged
    }//GEN-LAST:event_newtlistValueChanged

    private void chapterlistValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_chapterlistValueChanged
    {//GEN-HEADEREND:event_chapterlistValueChanged
    }//GEN-LAST:event_chapterlistValueChanged

    private void fromverselistValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_fromverselistValueChanged
    {//GEN-HEADEREND:event_fromverselistValueChanged
    }//GEN-LAST:event_fromverselistValueChanged

    private void toverselistValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_toverselistValueChanged
    {//GEN-HEADEREND:event_toverselistValueChanged
    }//GEN-LAST:event_toverselistValueChanged

    private void addToPresBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addToPresBtnActionPerformed
    {//GEN-HEADEREND:event_addToPresBtnActionPerformed
        addScripturetoPresentation();

    }//GEN-LAST:event_addToPresBtnActionPerformed

    private void closebtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closebtnActionPerformed
    {//GEN-HEADEREND:event_closebtnActionPerformed
        wasOk = false;
        this.setVisible(false);
    }//GEN-LAST:event_closebtnActionPerformed

    private void projnextbtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_projnextbtnActionPerformed
    {//GEN-HEADEREND:event_projnextbtnActionPerformed
        if (scripture == null || scripture.getChapter() == 0) {
            return;
        }

        BibleScripture scripverse = null;

        //Starting
        if (nowprojecting == 0) {
            //start from fromverse
            if (scripture.getFromverse() != 0) {

                scripverse = new BibleScripture(scripture.getBook(), scripture.getChapter(), scripture.getFromverse(), scripture.getFromverse());

                nowprojecting = scripture.getFromverse();
            } else {
                //assume to start from 1st verse
                scripverse = new BibleScripture(scripture.getBook(), scripture.getChapter(), 1, 1);
                nowprojecting = 1;
            }


        } else//continueing
        {
            nowprojecting++;
            if (nowprojecting > keeper.getVerseCount(scripture.getBook(), scripture.getChapter())) {
                nowprojecting = 0;
                return;
            }

            scripverse = new BibleScripture(scripture.getBook(), scripture.getChapter(), nowprojecting, nowprojecting);
        }

        final String pname = scripverse.getName();
        final String pverse = BibleKeeper.getInstance().getScripture(scripverse).trim();

        Platform.runLater(new Thread() {
            @Override
            public void run() {
                super.run();
                ProjectorView.getInstance().pushScene(new PXSongPage(pname, pverse));
            }
        });


    }//GEN-LAST:event_projnextbtnActionPerformed

    private void prevbtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prevbtnActionPerformed
    {//GEN-HEADEREND:event_prevbtnActionPerformed
        if (scripture == null || scripture.getChapter() == 0 || nowprojecting == 0) {
            return;
        }

        BibleScripture scripverse = null;

        nowprojecting--;
        if (nowprojecting < 1) {
            nowprojecting = 0;
            return;
        }


        scripverse = new BibleScripture(scripture.getBook(), scripture.getChapter(), nowprojecting, nowprojecting);

        final String pname = scripverse.getName();
        final String pverse = BibleKeeper.getInstance().getScripture(scripverse);

        Platform.runLater(new Thread() {
            @Override
            public void run() {
                super.run();
                ProjectorView.getInstance().pushScene(new PXSongPage(pname, pverse));
            }
        });

    }//GEN-LAST:event_prevbtnActionPerformed

    private void versionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_versionListValueChanged
        // TODO add your handling code here:
        LoadVersion(versionList.getSelectedValue().toString());
    }//GEN-LAST:event_versionListValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        LoadVersionFile();
//        //modified to test the new populate bible when repopulate() called
//        EntityOverlord.getInstance().repopulate();
//        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        // TODO add your handling code here:
        clearScreen();
    }//GEN-LAST:event_jButton2ActionPerformed
    private boolean wasOk = false;

    public boolean isWasOk() {
        return wasOk;
    }
    //Projection
    /**
     * IF this is zero, we cannot "Next" it. We must start first, which makes it
     * >0.
     */
    Integer nowprojecting = 0;

    private void updateProjectorIndicator() {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToPresBtn;
    private javax.swing.JList chapterlist;
    private javax.swing.JButton closebtn;
    private javax.swing.JList fromverselist;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JList newtlist;
    private javax.swing.JList oldtlist;
    private javax.swing.JButton prevbtn;
    private javax.swing.JTextArea previewArea;
    private javax.swing.JButton projnextbtn;
    private javax.swing.JList toverselist;
    private javax.swing.JList versionList;
    private javax.swing.JLabel versionlabel;
    // End of variables declaration//GEN-END:variables
    BibleKeeper keeper = BibleKeeper.getInstance();

    private void selectBook(MouseEvent evt) {
        newScripture();
        JList list = (JList) evt.getSource();

        if (list.getSelectedValue() != null) {

            selectedBook = list.getSelectedValue().toString();

            System.out.println(selectedBook);

            //clear chapter and verse list
            chapmod.clear();
            versmod.clear();

            //populate chapter list, leaving verse lists empty
            for (int x = 1; x <= keeper.getChapterCount(selectedBook); x++) {
                chapmod.addElement(x);
            }

            //set scripture

            scripture.set(selectedBook, 0, 0, 0);
            //submitScripture();
            nowprojecting = 0;
            updateProjectorIndicator();
        }

    }

    private void newScripture() {
        if (scripture == null) {
            scripture = new BibleScripture();
        }
    }
    BibleScripture scripture = new BibleScripture();
    String selectedBook = "";
    int selectedChapter = 0;

    private void selectChapter(MouseEvent evt) {
        JList list = (JList) evt.getSource();
        if (list.getSelectedValue() != null) {

            int chapter = Integer.parseInt(list.getSelectedValue().toString());

            //clear verse lists
            versmod.clear();

            //populate verse lists
            for (int x = 1; x <= keeper.getVerseCount(selectedBook, chapter); x++) {
                versmod.addElement(x);
            }


            //set scripture
            scripture.setChapter(chapter);
            scripture.setFromverse(0);
            scripture.setToverse(0);
            submitScripture();
            nowprojecting = 0;
            updateProjectorIndicator();
        }

    }

    private void selectFromVerse(MouseEvent evt) {
        if (fromverselist.getSelectedValue() != null) {

            int fverse = Integer.parseInt(fromverselist.getSelectedValue().toString());


            if (scripture.getToverse() == 0 || scripture.getToverse() < fverse) {
                scripture.setToverse(fverse);
                toverselist.setSelectedIndex(fverse - 1);
            }

            //set scripture
            scripture.setFromverse(fverse);
            submitScripture();

            nowprojecting = 0;
            updateProjectorIndicator();
        }
    }

    private void selectToVerse(MouseEvent evt) {

        JList list = (JList) evt.getSource();

        int fverse = Integer.parseInt(fromverselist.getSelectedValue().toString());
        int tverse = Integer.parseInt(toverselist.getSelectedValue().toString());

        if (scripture.getToverse() == 0 || scripture.getToverse() < fverse) {
            tverse = fverse;
            toverselist.setSelectedIndex(fverse - 1);
        }

        //set scripture
        scripture.setToverse(tverse);
        submitScripture();

    }

    /**
     * Query the bible keeper with this scripture and show result in text area.
     */
    private void submitScripture() {
        String verses = BibleKeeper.getInstance().getScripture(scripture);

        previewArea.setText(verses);
    }
    String result = "";
    private static BibleDialog instance;

    public static void launch() {
        //Swing does not work well in a JavafX app in mac
        if (OSUtils.isMac()) {
            BibleDialogController.launch();
        } else {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    if (instance == null) {
                        instance = new BibleDialog(null, true);
                        instance.setAlwaysOnTop(true);
                    }
                    instance.setVisible(true);
                }
            });
        }

    }

    private void prepListActions() {
        oldtlist.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseClicked(e);
                newtlist.getSelectionModel().clearSelection();
                selectBook(e);
            }
        });

        newtlist.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent evt) {
                super.mouseClicked(evt);
                oldtlist.getSelectionModel().clearSelection();
                selectBook(evt);
            }
        });

        chapterlist.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent evt) {
                super.mouseClicked(evt);
                selectChapter(evt);
            }
        });

        fromverselist.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent evt) {
                super.mouseClicked(evt);
                selectFromVerse(evt);
            }
        });

        toverselist.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent evt) {
                super.mouseClicked(evt);
                selectToVerse(evt);
            }
        });


    }

    private void addScripturetoPresentation() {

        if (UI.selectedPresentation == null) {
            JOptionPane.showMessageDialog(this, "Please select a Presentation first before adding to Presentation List");
            return;
        }

        if (!scripture.isUsable()) {
            JOptionPane.showMessageDialog(this, "Be sure to select at least a book and a chapter.");
            return;
        }

        EntityManager em = EntityOverlord.getInstance().getEm();

        PresentationAssets pass = new PresentationAssets();
        pass.setPid(UI.selectedPresentation.getId());
        pass.setAssetid(0);
        pass.setAddedOn(new Date());
        pass.setBook(scripture.getBook());
        pass.setChapter(scripture.getChapter());
        pass.setFromverse(scripture.getFromverse());
        pass.setToverse(scripture.getToverse());

        em.getTransaction().begin();
        em.persist(pass);
        em.getTransaction().commit();


        Application.invokeLater(
                new Runnable() {
            @Override
            public void run() {
                CreationTabController.getInstance().refreshPresentationAssetList();
            }
        });
    }

    /**
     * Load a new bible Version
     *
     * @param toString
     */
    public void LoadVersion(String name) {
        try {
            //BibleKeeper.getInstance().loadBible(name);           
            BibleKeeper.getInstance().loadBible(BibleTranslation.getBibleTranslation(name));
            versionlabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("i18n/Bundle").getString("bible.current.selectedversion"), new Object[]{name}));
            submitScripture();
        } catch (IOException ex) {
            Logger.getLogger(BibleDialog.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Can't open Bible File");

        } catch (JDOMException ex) {
            Logger.getLogger(BibleDialog.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Can't open Bible File");
        }
    }

    private void LoadVersionFile() {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose Bible File");
        chooser.showOpenDialog(this);

        if (chooser.getSelectedFile() == null) {
            return;
        }

        try {
            BibleKeeper.getInstance().loadBible(chooser.getSelectedFile());
            versionlabel.setText("<html>Current: " + chooser.getSelectedFile().getName() + "</html>");
            submitScripture();
        } catch (IOException ex) {
            Logger.getLogger(BibleDialog.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Can't open Bible File");

        } catch (JDOMException ex) {
            Logger.getLogger(BibleDialog.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Can't open Bible File");
        }

    }

    private void clearScreen() {

        Platform.runLater(new Thread() {
            @Override
            public void run() {
                super.run();
                ProjectorView.getInstance().pushScene(new PXSongPage("", ""));
            }
        });
    }
}
