/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.quvizo.ui.misc;

import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author bufflogic
 */
public class InstructionsDialog extends javax.swing.JDialog {

    /**
     * Creates new form InstructionsDialog
     */
    public InstructionsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public static void launch()
    {
        try {
            SwingUtilities.invokeAndWait(new Runnable() {

                @Override
                public void run() {
                    new InitImportDialog(null, false).setVisible(true);
                }
            });
        } catch (InterruptedException ex) {
            Logger.getLogger(InitImportDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(InitImportDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setTitle("About EpicWorship");
        setAlwaysOnTop(true);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setText("Epicworship");

        jLabel2.setText("<html>EpicWorship is a very strong answer to the question \"Is there a <b>simple</b>, but High-Quality Visual projection software that exists for Churches that is also absolutely FREE?\".<br/><br/></html>");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel3.setText("<html><h2>Songs/Text</h2> <p>Epicworship wouldn't be a solution without the ability to project text for every purpose. Now there's quite a lot of options that do this already, but Epicworship Sets itself apart by also projecting text with a brilliantly calculated shadow underlay so your text stands out no matter what background it is to be displayed on. <br /> You even have the power to choose how thick you want this shadow underlay or what colors it should be. We could keep talking about it, but it would only make sense to you if you tried it out.<br /> <br /> <br /></p> <h2>Audio/Video</h2> <p>EpicWorship supports MP4/FLV videos as well as MP3 audio. <br /> Supported codecs are ON2 FLV and H264 for MP4. WMV/WMA is NOT supported.<br /> If you ever try to load a video and epicworship completely and totally ignores your action, then your video codec was not supported.<br /> <br /></p> <h2>Motion Background</h2> <p>Use supported videos as background. The transitions when you change them are quite epic.<br /> <br /></p> <h2>Scripture</h2> <p>EpicWorship wouldn't be a viable solution without support for scripture projection.<br /> We have some in-built bible versions and the list will increase as time goes on, but you can also import bible translations from files.<br /> We recommend you get these bible files from OpenSong.org. Epicworship shares the same bible structure of that Church projection solution.<br /> <br /> <br /></p> <h2>Video Countdown</h2> <p>This was one of the many reasons that prompted it's development and one of the many ways it sets itself apart.<br /> <br /> With EpicWorship, you can schedule a video to play at a specific time of the week and it will handle itself like a big boy when you're not around it.<br /> Set the day of week (e,g Sunday), hour, minute and second and the video you want to play and as long as Epicworship happens to be running, it will automatically play that video at that specific time. <br />Perfect for video countdowns to start your services in style.<br /> <br /> This technically could also be used to time-launch an MP3 file.<br /> <br /> <br /></p> <h2>A typical day in the life of a Projection Director....</h2> <p><br /> We believe so much in intuitivity (if that's a word). So as far as instructions go, we won't be telling you how to do every little thing in epicworship.<br /> Much of it should be obvious and we've added hover tooltips along the way to help you out. This would be typical actions of a director in a service...<br /> <br /></p> <h4>1. First things first, Create a presentation. (The Creation tab)</h4> <ul> <li> - You'll find this on the left hand side of the Creation Tab. This is where all content for this service will be added.</li> <li> - Epicworship will always open the last Presentation created when launched.</li> </ul> <p> </p> <h4>2. Add Songs/Text (The Creation-&gt;Song tab)</h4> <ul> <li> - You can create new songs or add pre-existing songs from the song list into the presentation you created earlier.</li> <li> - Content added to the presentation can be seen (and removed) from the list at the bottom-right.</li> <li> - Seperate the pages of a song with an empty line (Makes for easy copy and paste of lyrics).</li> <li> - you can search for any phrase of a song from the search box at the top of the song list.</li> <li> - To quickly add content to the presentation from the list.</li> <li> - It's a good idea to make things like Announements a song.</li> </ul> <p> </p> <h4>3. Add Audio/Video (The Creation-&gt; Media)</h4> <p>If you need to, this is where you add or register audio and video. Much of same tips apply as Songs/Text.<br /> <br /></p> <h4>4. Add Scripture</h4> <ul> <li> You can do this either from the Creation-&gt;Scripture tab or from the Live tab. Launches the scripture dialog which allows you to add scripture to the presentation in preparation, or project scripture on the fly.</li> <li> You can choose your translation there as well.</li> </ul> <p><br /> With these things ready, it's time to check out what's happening in the live Tab.<br /> Project an item or launch a media item by clicking on it's row in the live table.<br /> Notice the QuikPanel to the right. It has a Background mini-tab, and a Text &amp; settings mini-tab.<br /> Here are some of the cool things you may want to do from there during a service:<br /> <br /></p> <h4>1. Change backgrounds</h4> <p>The backgrounds minitab contains all the actions to change your background video or image.<br /> <br /></p> <h4>2. Quickly add/project scripture</h4> <p>From the Text &amp; Settings min[itab, clicking on the \"Open bible\" button will launch the same scripture dialog as it did earlier in Creation-&gt;Scripture.<br /> <br /></p> <h4>3. Change Text Appearance</h4> <p>From the same minitab, you can customize a lot of things about the appearance of your text and songs. Give it a try.<br /> <br /></p> <h4>4. QUIKTEXT</h4> <p>You can quickly project text that you have not created a song of from here. Like an alert or a snarky comment to the congregation =)<br /> <br /> <br /> <strong>...and That's it! May this tool serve you well in your sharing of the gospel to the people.<br /> God bless.</strong></p></html>");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel4.setText("1.0.3.2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel4)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1724, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InstructionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InstructionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InstructionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InstructionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                InstructionsDialog dialog = new InstructionsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
